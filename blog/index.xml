<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Wu Sun, Ph.D.</title>
    <link>http://wusun.name/blog/</link>
    <description>Recent content in Blog on Wu Sun, Ph.D.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2019 21:19:09 +0000</lastBuildDate>
    
	<atom:link href="http://wusun.name/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OCaml packages for scientific computing</title>
      <link>http://wusun.name/blog/2019-02-19-ocaml-packages-for-scientific-computing/</link>
      <pubDate>Tue, 19 Feb 2019 21:19:09 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2019-02-19-ocaml-packages-for-scientific-computing/</guid>
      <description>This is a collection of OCaml packages that are potentially useful for scientific computing. (Disclaimer: I have only used some of them. But I choose to list all I found useful here for future reference.)
Numerical computing  Owl: The de facto numerical computing library for OCaml. Probably the best maintained OCaml numerical computing package at this moment. gsl: OCaml bindings to the GNU Scientific Library. lacaml: OCaml bindings to BLAS and LAPACK.</description>
    </item>
    
    <item>
      <title>Use minted syntax highlighting in LaTeX with Visual Studio Code LaTeX Workshop</title>
      <link>http://wusun.name/blog/2019-01-17-minted-vscode/</link>
      <pubDate>Thu, 17 Jan 2019 22:03:00 -0800</pubDate>
      
      <guid>http://wusun.name/blog/2019-01-17-minted-vscode/</guid>
      <description>Syntax highlighting in LaTeX is traditionally done with listings. However, as many pointed out, this is a defective solution because the listings package does not have a lexer. Recently, the minted package seems to emerge as a standard and preferred solution to syntax highlighting in LaTeX. This package is now part of the TeXLive distribution.
minted requires Pygments as an external lexer and highlighter. As a result, to use it properly requires enabling --shell-escape option on LaTeX compilers (latexmk and pdflatex).</description>
    </item>
    
    <item>
      <title>Update OCaml and OPAM along with packages</title>
      <link>http://wusun.name/blog/2018-10-09-update-ocaml-opam/</link>
      <pubDate>Mon, 08 Oct 2018 22:01:07 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2018-10-09-update-ocaml-opam/</guid>
      <description>As a beginner of OCaml, it felt a bit unwieldy to perform an upgrade of my current environment (OCaml + OPAM + packages). I knew there was not a single command that does all the tasks like conda for Python. Luckily, it was not so difficult with OPAM&amp;rsquo;s import/export function [1]. I upgraded my OCaml environment with all installed packages retained following these steps without much trouble.
  Export the list of currently installed packages:</description>
    </item>
    
    <item>
      <title>PEP 484 is great</title>
      <link>http://wusun.name/blog/2018-07-24-pep484-is-great/</link>
      <pubDate>Mon, 23 Jul 2018 21:43:48 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2018-07-24-pep484-is-great/</guid>
      <description>I begin to like sprinkling a few PEP 484 type hints in my Python code. Not necessarily because my code is laden with undetectable bugs and I want to use static type checking to help; it&amp;rsquo;s mainly because it makes the code more self-explanatory. It is a manifestation of the Zen of Python that &amp;ldquo;explicit is better than implicit&amp;rdquo;.
Here&amp;rsquo;s a little example. Compare the Python snippet
def filter_substr(strlst: List[str], substr: str) -&amp;gt; List[str]: return list(filter(lambda s: substr in s, strlst)) with the equivalent Standard ML one</description>
    </item>
    
    <item>
      <title>A comparison of some markdown publishing systems</title>
      <link>http://wusun.name/blog/2018-07-16-markdown-publishing/</link>
      <pubDate>Sun, 15 Jul 2018 20:32:00 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2018-07-16-markdown-publishing/</guid>
      <description>Markdown is the new LaTeX for technical and academic writing. Although LaTeX is still the gold standard, if your writing does not involve a whole lot of theorems and proofs, drawing diagrams in TikZ and PGF, or some heavy tweaking of the page styles, Markdown may suffice for your use cases. A lightly marked text format like Markdown helps the writer concentrate on the contents rather than the styles.
In the past few years, I have gradually replaced some of my writing tasks in LaTeX with automated generation of LaTeX and PDF from Markdown by pandoc.</description>
    </item>
    
    <item>
      <title>Random thoughts on optimizing code for scientific computations</title>
      <link>http://wusun.name/blog/2018-06-13-optimizing-scientific-code/</link>
      <pubDate>Wed, 13 Jun 2018 19:25:00 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2018-06-13-optimizing-scientific-code/</guid>
      <description>I have no time to write an essay, so here are some fragmentary thoughts.
  Scientists who deal with computationally demanding research subjects can be obsessed with code performance, and sometimes rightly so. However, this obsession, if not tamed by sound principles and pragmatic wisdom, may lead us down the evil path of Premature Optimization. We should always be reminded of its danger. The aphorism by Donald Knuth may be recited three times a day:</description>
    </item>
    
    <item>
      <title>I&#39;m updating my website</title>
      <link>http://wusun.name/blog/2018-06-02-update-website/</link>
      <pubDate>Sat, 02 Jun 2018 19:41:02 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2018-06-02-update-website/</guid>
      <description>I&amp;rsquo;m refactoring my academic website using the Minimal Mistakes theme to get a cleaner look. Stay tuned!
Added on 2018-11-30: In the end I settled on the Minima theme. I like its minimalist design and it&amp;rsquo;s a good fit for a simple academic website with a blog.</description>
    </item>
    
    <item>
      <title>Is there a performance difference between a macro and a global constant?</title>
      <link>http://wusun.name/blog/2018-05-24-julia-macro-vs-globalconst/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2018-05-24-julia-macro-vs-globalconst/</guid>
      <description>Disclaimer on 2018-11-30: These tests were performed under Julia v0.6. Due to the incompatible syntax changes brought by Julia v0.7 and v1.0 and improved compiler optimization, they may not run or the emitted low-level code may not be the same.
The use of the global variable is discouraged in Julia for performance reasons (see the Julia documentation). But what about global constants? I&amp;rsquo;m quite new to the Julia language, but I bet that it would not be difficult for the compiler to identify a const and optimize over it.</description>
    </item>
    
    <item>
      <title>A simple fix to a common issue with Anaconda libgfortran on macOS</title>
      <link>http://wusun.name/blog/2018-04-27-conda-libgfortran-issue/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2018-04-27-conda-libgfortran-issue/</guid>
      <description>To compile some Fortran code that used features newer than Fortran 95, I switched the default gfortran from the conda one (version 4.8) to the latest GCC one (version 7.3). After that, I found that I could no longer execute some previously compiled Fortran programs and I also ran into troubles with some Anaconda Python packages. (Maybe it was my fault not to statically link them.) I got the same error for all of them:</description>
    </item>
    
    <item>
      <title>Some common pitfalls in writing Fortran functions</title>
      <link>http://wusun.name/blog/2018-04-25-fortran-functions/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2018-04-25-fortran-functions/</guid>
      <description>Recently, I have been trying to port or interface some Fortran code for a project in Python. It was quite an uphill struggle for me. I thought I knew how to write subroutines in Fortran 90, but when I decided to write pure functions in the latest Fortran style, which is Fortran 2008, it did not go as well as I expected. The compiler yelled at me a screenful of errors.</description>
    </item>
    
    <item>
      <title>Installing Kanboard on macOS</title>
      <link>http://wusun.name/blog/2018-01-10-install-kanboard/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2018-01-10-install-kanboard/</guid>
      <description>Kanban is a lean method for project management that has been popular in software development and knowledge work. Recently, after reading a bunch of blog articles and technical booklets, I came up with an idea to use the Kanban method to manage my scientific projects. After all, speaking of the production of knowledge work, scientific research is analogous to manufacturing.
I came across a powerful open source Kanban software â€” Kanboard.</description>
    </item>
    
    <item>
      <title>Why Python&#39;s ZeroDivisionError for floating-point type is a bad and unnecessary feature</title>
      <link>http://wusun.name/blog/2017-12-18-python-zerodiv/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2017-12-18-python-zerodiv/</guid>
      <description>In Python 2.7 and 3.6, dividing a floating-point number by zero results in a ZeroDivisionError:
&amp;gt;&amp;gt;&amp;gt; 1. / 0. Traceback (most recent call last): File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt; ZeroDivisionError: float division by zero This is not consistent with mathematics, given that $1 / 0 = \infty$. Wouldn&amp;rsquo;t it be better to just return inf? In fact, the exception &amp;ldquo;division by zero&amp;rdquo; has been stipulated to return infinities in the IEEE 754 standard for floating-point arithmetic [1]:</description>
    </item>
    
    <item>
      <title>The Sieve of Eratosthenes in Haskell: A naive implementation</title>
      <link>http://wusun.name/blog/2017-12-09-prime-sieves/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2017-12-09-prime-sieves/</guid>
      <description>I have been learning Haskell for a while. The more I am exposed to this language, the more I am amazed by the elegance of the functional programming paradigm. List comprehension is one of the beautiful things that I like in Haskell. Coming from Python, I am familiar with it. But the list comprehension in Haskell feels more natural because it is closer to what you would write in mathematics.</description>
    </item>
    
    <item>
      <title>Merge multiple EPS subfigures into a single figure using LaTeX Beamer</title>
      <link>http://wusun.name/blog/2015-05-13-merge-figure/</link>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wusun.name/blog/2015-05-13-merge-figure/</guid>
      <description>Some academic journals require all subfigures to be combined as one single file for submission. This may not be easy to do if you don&amp;rsquo;t have a professional software (often proprietary) to edit vector maps, e.g., EPS and PDF.
I found a convenient way to deal with in LaTeX Beamer. The idea is to create a beamer slide and insert your subfigures with the command \includegraphics{} in the same figure environment.</description>
    </item>
    
    <item>
      <title>Adding section numbers to LaTeX floats numbering and other tips</title>
      <link>http://wusun.name/blog/2012-10-04-latex-floats-numbering/</link>
      <pubDate>Thu, 04 Oct 2012 12:00:00 -0700</pubDate>
      
      <guid>http://wusun.name/blog/2012-10-04-latex-floats-numbering/</guid>
      <description>I have been learning to use LaTeX for some time. Now I do most of my homework assignments in LaTeX. It wears quite well on me. I have encountered some issues, but most of the time I was able to find elegant solutions on TeX StackExchange. Here are a few tips I learned recently.
1. Show chapter or section numbers in equation/figure/table numbering By default, LaTeX assigns equation numbers continually across different sections.</description>
    </item>
    
  </channel>
</rss>